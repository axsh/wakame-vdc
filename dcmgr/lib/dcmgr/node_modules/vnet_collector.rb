# -*- coding: utf-8 -*-
require 'isono'
require 'ipaddress'

require 'vnet_api_client'

module Dcmgr
  module NodeModules
    class VnetCollector < Isono::NodeModules::Base
      include Isono::NodeModules
      include Dcmgr::Logger

      initialize_hook do
        endpoint = Dcmgr::Configurations.dcmgr.features.vnet_endpoint
        port = Dcmgr::Configurations.dcmgr.features.vnet_endpoint_port

        VNetAPIClient.uri = "http://#{endpoint}:#{port}"

        app = Isono::Rack::ObjectMethod.new(myinstance)
        job = Isono::NodeModules::JobChannel.new(node)
        job.register_endpoint('vnet-collector', Isono::Rack.build do
                                use Isono::Rack::Sequel
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def schedule_vifs(instance_uuid)
        instance = Models::Instance[instance_uuid]

        ret = []

        instance.network_vif.each do |vif|
          params = {}
          if_uuid = vif.canonical_uuid.sub(/v/, '')

          params[:uuid] = if_uuid
          params[:network_uuid] = vif.network.canonical_uuid
          params[:mac_address] = vif.pretty_mac_addr
          params[:ipv4_address] = vif.ip.first.ipv4_s
          params[:port_name] = if_uuid
          params[:ingress_filtering_enabled] = true if !vif.security_groups.empty?

          r = VNetAPIClient::Interface.create(params)

          if r["uuid"] && !vif.security_groups.empty?
            vif.security_groups.each do |secg|
              VNetAPIClient::Interface.add_security_group(r["uuid"], secg.canonical_uuid)
            end
          end

          ret << r["uuid"]
        end

        ret
      end

      def delete_vifs(instance_uuid)
        instance = Models::Instance[instance_uuid]

        ret = []

        instance.network_vif.each do |vif|
          if_uuid = vif.canonical_uuid.sub(/v/, '')
          r = VNetAPIClient::Interface.delete(if_uuid)
          ret << r["uuid"]
        end

        ret
      end
    end
  end
end

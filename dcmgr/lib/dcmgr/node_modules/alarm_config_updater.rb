# -*- coding: utf-8 -*-

module Dcmgr::NodeModules

  class AlarmConfigUpdater < Isono::NodeModules::Base
    include Isono::NodeModules
    include Dcmgr::Logger
    include Dcmgr::Helpers::TemplateHelper

    initialize_hook do
        app = Isono::Rack::ObjectMethod.new(myinstance)
        job = Isono::NodeModules::JobChannel.new(node)
        job.register_endpoint("log-alarm-registry.#{self.node.node_id}", Isono::Rack.build do
                                run proc { |req, res|
                                  app.call(req, res)
                                }
                              end)
    end

    terminate_hook do
    end

    def update_alarm(alarm_id)
      @alarms = rpc.request('alarm-collector', 'get_log_alarms')
      write_config
    end

    def delete_alarm(alarm_id)
      @alarms = rpc.request('alarm-collector', 'get_log_alarms')
      write_config
    end

    private
    def write_config
      alm = []
      @alarms.each do |a|
        alm << {
          :resource_id => a[:resource_id],
          :alarm_id => a[:uuid],
          :tag => a[:params]['label'],
          :match_pattern => a[:params]['match_pattern'],
          :evaluation_periods => a[:evaluation_periods]
        }
      end
      fluent = Dcmgr::Drivers::Fluent.new
      fluent.set_alarms(alm)
      fluent.generate_config
      fluent.reload
    end

    def rpc
      @rpc ||= Isono::NodeModules::RpcChannel.new(@node)
    end

  end
end

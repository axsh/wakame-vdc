# -*- coding: utf-8 -*-
require 'isono'

module Dcmgr
  module NodeModules
    class Scheduler < Isono::NodeModules::Base
      include Dcmgr::Logger

      # module_module: bin/collector
      initialize_hook do
        app = Isono::Rack::ObjectMethod.new(myinstance)
        job = Isono::NodeModules::JobChannel.new(node)
        job.register_endpoint('scheduler', Isono::Rack.build do
                                use Isono::Rack::Sequel
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def schedule_instance(instance_id)
        instance = Models::Instance[instance_id] || raise("Unknown instance: #{instance_id}")

        db.after_rollback do
          if instance
            db.transaction do
              instance.refresh.destroy
              # volumes are still in available state. so bring them to deleted.
              instance.volumes_dataset.alives.all.each(&:destroy)
            end
          end
        end
        
        svc_type = Dcmgr::Scheduler.service_type(instance)

        svc_type.host_node.schedule(instance) if instance.host_node.nil?
        svc_type.network.schedule(instance) if instance.network_vif.empty?
        instance.save_changes
        setup_vif_monitors(instance)

        instance.state = Constants::Instance::STATE_PENDING
        instance.save_changes
        
        instance.volumes_dataset.filter_by_state(Const::Volume::STATE_SCHEDULING).each { |vol|
          logger.info("Scheduling volume devices for #{instance.canonical_uuid}: #{vol.canonical_uuid} of #{vol.volume_type}")
          case vol.volume_type
          when 'Dcmgr::Models::LocalVolume'
            if instance.host_node.available_disk_space < vol.size
              raise Dcmgr::Scheduler::HostNodeSchedulingError, "Insufficient local disk space #{vol.canonical_uuid}."
            end
            vol.volume_class.create(:id=>vol.id,
                                    :instance_id=>instance.pk,
                                    :mount_label=>'instance',
                                    :path=>"#{vol.canonical_uuid}")
          when nil
            svc_type.storage_node.schedule(vol)
          else
            raise "Unknown Volume Type: #{vol.volume_type}"
          end

          vol.state = Constants::Volume::STATE_PENDING
          vol.save_changes
        }

        instance.volumes_dataset.filter_by_state(Const::Volume::STATE_PENDING).each { |vol|
          case vol.volume_type
          when 'Dcmgr::Models::LocalVolume'
          else
            db.after_commit do
              self.job.submit("sta-handle.#{vol.storage_node.node_id}",
                              'create_volume_and_run_instance', vol.canonical_uuid, instance.canonical_uuid)
            end
          end
        }

        case instance.image.boot_dev_type
        when Const::Image::BOOT_DEV_LOCAL
          db.after_commit do
            self.job.submit("local-store-handle.#{instance.host_node.node_id}",
                            'run_local_store', instance.canonical_uuid)
          end
        else
          raise "Unknown boot type"
        end
        
        db.after_commit do
          event.publish('instance.scheduled', :args=>[instance.canonical_uuid])
        end
        
        logger.info("Provisioned instance: #{instance.canonical_uuid} on #{instance.host_node.canonical_uuid}")
        logger.info("Finished scheduling instance [inst_id: #{instance_id}]")
        nil
      rescue ::Exception => e
        logger.error("Error occured. [inst_id: #{instance_id}]")
        logger.error(e)
        raise e
      end

      def schedule_instance_ha(instance_id, vol)
        instance = Models::Instance[instance_id]
        svc_type = Dcmgr::Scheduler.service_type(instance)

        svc_type.host_node_ha.schedule(instance)
        # Don't re-schedule network here.
        # The IP address, MAC address and NIC must be assigned with same address.
        instance.save

        instance.state = :pending
        instance.save

        commit_transaction
        case instance.image.boot_dev_type
        when Const::Image::BOOT_DEV_SAN
          self.job.submit("hva-handle.#{instance.host_node.node_id}", 'run_vol_store', instance.canonical_uuid, vol.canonical_uuid)
        when Const::Image::BOOT_DEV_LOCAL
          self.job.submit("local-store-handle.#{instance.host_node.node_id}", 'run_local_store', instance.canonical_uuid)
        else
          raise "Unknown boot type"
        end
        event.publish('instance.scheduled', :args=>[instance.canonical_uuid])

      rescue ::Exception => e
        rollback_transaction rescue nil

        logger.error("Error occured. [inst_id: #{instance_id}]")
        logger.error(e)
        instance.refresh.destroy if instance
        vol.refresh.destroy if vol
        return
      end

      def schedule_start_instance(instance_id)
        instance = Models::Instance[instance_id]
        vol = instance.boot_volume
        svc_type = Dcmgr::Scheduler.service_type(instance)

        svc_type.host_node.schedule(instance)
        instance.nic.each { |nic|
          nic.lease_ip_lease
        }
        instance.save_changes

        instance.state = :pending
        instance.save

        commit_transaction
        case instance.image.boot_dev_type
        when Const::Image::BOOT_DEV_SAN
          self.job.submit("hva-handle.#{instance.host_node.node_id}", 'run_vol_store', instance.canonical_uuid, vol.canonical_uuid)
        when Const::Image::BOOT_DEV_LOCAL
          self.job.submit("local-store-handle.#{instance.host_node.node_id}", 'run_local_store', instance.canonical_uuid)
        else
          raise "Unknown boot type"
        end
        event.publish('instance.scheduled', :args=>[instance.canonical_uuid])

      rescue ::Exception => e
        rollback_transaction rescue nil

        logger.error("Error occured. [inst_id: #{instance_id}]")
        logger.error(e)
        instance.refresh.destroy if instance
        vol.refresh.destroy if vol
        return
      end

      def schedule_volume(volume_id)
        volume = Models::Volume[volume_id] || raise("Unknown volume ID: #{volume_id}")
        svc_type = Dcmgr::Scheduler.service_type(volume)

        svc_type.storage_node.schedule(volume)
        volume.save

        volume.state = :pending
        volume.save

        commit_transaction

        self.job.submit("sta-handle.#{volume.storage_node.node_id}",
                        'create_volume', volume.canonical_uuid)
      rescue ::Exception => e
        rollback_transaction rescue nil

        logger.error("Error occured. [volume_id: #{volume_id}]")
        logger.error(e)
        volume.refresh.destroy
      end

      protected
      def db
        Sequel::DATABASES.first
      end
      
      # commit manually before return from the request block
      def commit_transaction
        db << db.__send__(:commit_transaction_sql)
      end

      def rollback_transaction
        db << db.__send__(:rollback_transaction_sql)
      end

      def job()
        Isono::NodeModules::JobChannel.new(self.node)
      end

      def event()
        Isono::NodeModules::EventChannel.new(self.node)
      end

      private

      def setup_vif_monitors(instance)
        vif_params = instance.request_params['vifs']
        return if vif_params.nil? || vif_params.empty?

        # Assume that the vif_params and instance.vifs have same order
        # of items.
        viflst = instance.network_vif
        vif_params.each { |name, param|
          vif = viflst.shift
          next if vif.nil?
          if param['monitors'].is_a?(Hash)
            param['monitors'].each { |idx, m|
              vif.add_network_vif_monitor(m.select { |k,v| Models::NetworkVifMonitor.columns.member?(k.to_sym) })
            }
          elsif param['monitors'].is_a?(Array)
            param['monitors'].each { |m|
              vif.add_network_vif_monitor(m.select { |k,v| Models::NetworkVifMonitor.columns.member?(k.to_sym) })
            }
          end
        }
      end

    end
  end
end

# -*- coding: utf-8 -*-
require 'isono'
require 'ipaddress'

module Dcmgr
  module NodeModules
    class NatboxCollector < Isono::NodeModules::Base
      include Isono::NodeModules
      include Dcmgr::Logger

      initialize_hook do
        rpc = RpcChannel.new(node)
        app = Isono::Rack::ObjectMethod.new(myinstance)
        rpc.register_endpoint('natbox-collector', Isono::Rack.build do
                                use Isono::Rack::DataStore
                                run proc { |req, res|
                                  Thread.current[Models::BaseNew::LOCK_TABLES_KEY] = {}
                                  app.call(req, res)
                                }
                              end)
      end

      terminate_hook do
      end

      def get_network_route(id, dc_network_name)
        network_route = Models::NetworkRoute[id]
        raise "UnknownNetworkRouteID" if network_route.nil?
        network_route.inner_network.dc_network.name == dc_network_name.to_s ? network_route_to_hash(network_route) : nil
      end

      def get_alive_network_routes(dc_network_name)
        #Models::NetworkRoute.join_with_ip_leases.map do |network_route|
        #  network_route_to_hash(network_route)
        #end
        Models::NetworkRoute.join_table(:left, :network_vif_ip_leases,
          {:outer_ip_leases__id => :network_routes__outer_lease_id},
          :table_alias => :outer_ip_leases
        ).join_table(:left, :network_vif_ip_leases,
          {:inner_ip_leases__id => :network_routes__inner_lease_id},
          :table_alias => :inner_ip_leases
        ).join_table(:inner, :networks,
          {:inner_networks__id => :inner_ip_leases__network_id},
          :table_alias => :inner_networks
        ).join_table(:inner, :dc_networks,
          {:inner_dc_networks__id => :inner_networks__dc_network_id},
          :table_alias => :inner_dc_networks
        ).alives.filter(:inner_dc_networks__name => dc_network_name.to_s).map do |network_route|
          network_route_to_hash(network_route)
        end
      end

      def network_route_to_hash(network_route)
        { id: network_route.id,
          outer_ipv4: network_route.outer_lease.ipv4,
          inner_ipv4: network_route.inner_lease.ipv4 }
      end
    end
  end
end

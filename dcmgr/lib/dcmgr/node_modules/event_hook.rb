#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'isono'

module Dcmgr
  module NodeModules
    class EventHook < Isono::NodeModules::Base
      include Dcmgr::Logger

      initialize_hook do
        @worker_thread = Isono::ThreadPool.new(1, 'EventHook')

        event = Isono::NodeModules::EventChannel.new(node)
        event.subscribe('hva/instance_terminated', '#') do |args|
          logger.info("event caught: #{args.inspect}")
          instance_id = args[0]
          @worker_thread.pass {
            Sequel::DATABASES.first.transaction do
              instance = Models::Instance[instance_id]
              network_vif = instance.network_vif.first
              load_balancers = Models::LoadBalancerTarget.get_load_balancers(network_vif.canonical_uuid)
              load_balancers.each { |lb|
                myinstance.unregister_instance(lb.canonical_uuid, network_vif.canonical_uuid)
                myinstance.update_load_balancer(lb.canonical_uuid, network_vif.canonical_uuid)
              }
            end
          }
        end
      end

      terminate_hook do
        @worker_thread.shutdown
      end

      def unregister_instance(load_balancer_id, network_vif_id)
        begin
          lb = Models::LoadBalancer[load_balancer_id]
          lbt = lb.remove_target(network_vif_id)
          logger.info("Unregister interface #{network_vif_id} from Load Balancer Target #{lbt.id}.")
        rescue ::Exception => e
          logger.error("Error occured. [load_balancer_id: #{load_balancer_id}]")
          logger.error(e)
        end
      end

      def update_load_balancer(load_balancer_id, exclude_vif)
        lb = Models::LoadBalancer[load_balancer_id]
        config_params = {
          :instance_protocol => lb.instance_protocol,
          :instance_port => lb.instance_port,
          :balance_algorithm => lb.balance_algorithm,
          :cookie_name => lb.cookie_name,
          :port => lb.connect_port,
          :protocol => lb.protocol,
          :servers => lb.get_target_servers(:exclude_vifs => [exclude_vif])
        }

        queue_params = {
          :name => 'reload:haproxy',
          :topic_name => lb.topic_name,
          :queue_options => lb.queue_options,
          :queue_name => lb.queue_name
        }

        Sequel::DATABASES.first.after_commit do
          Messaging::LoadBalancer.update_load_balancer_config(config_params.merge(queue_params))
          logger.info("Update load balancer: #{load_balancer_id}")
        end

      end

    end
  end
end

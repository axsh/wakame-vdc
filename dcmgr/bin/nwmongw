#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'dcmgr/rubygems'
require 'dcmgr'
require 'isono'

require 'eventmachine'

class MonitoringGateway < Isono::NodeModules::Base
  include Dcmgr::Logger

  initialize_hook do
    event = Isono::NodeModules::EventChannel.new(node)
    @worker = Isono::ThreadPool.new(1)
    @driver = Dcmgr.conf.driver_class.new

    event.subscribe('hva/instance_started', '#') do |args|
      @worker.pass {
        myinstance.register_monitoring(args[0])
      }
    end

    event.subscribe('hva/instance_terminated', '#') do |args|
      @worker.pass {
        myinstance.unregister_monitoring(args[0])
      }
    end

    event.subscribe('instance.monitoring.refreshed', '#') do |args|
      @worker.pass {
        myinstance.refresh_monitoring(args[0][:instance_id])
      }
    end
  end

  def register_monitoring(instance_uuid)
    instance = Dcmgr::Models::Instance[instance_uuid] || raise("Unknown instance: #{instance_uuid}")

    logger.info("Registering monitoring configuration for #{instance.canonical_uuid}");
    @driver.register_instance(instance)
  end

  def refresh_monitoring(instance_uuid)
    instance = Dcmgr::Models::Instance[instance_uuid] || raise("Unknown instance: #{instance_uuid}")

    logger.info("Refreshing monitoring configuration for #{instance.canonical_uuid}");
    @driver.update_instance(instance)
  end

  def unregister_monitoring(instance_uuid)
    instance = Dcmgr::Models::Instance[instance_uuid] || raise("Unknown instance: #{instance_uuid}")

    logger.info("Unregistering monitoring configuration for #{instance.canonical_uuid}");
    @driver.unregister_instance(instance)
  end
end

include Isono::Runner::RpcServer

Dcmgr.load_conf(Dcmgr::Configurations::Nwmongw,
                [ENV['CONF_PATH'].to_s,
                 '/etc/wakame-vdc/nwmongw.conf',
                 File.expand_path('config/nwmongw.conf', Dcmgr::DCMGR_ROOT)
                ])

Dcmgr.run_initializers('logger', 'sequel')

manifest = DEFAULT_MANIFEST.dup
manifest.instance_eval do
  node_name 'nwmongw'
  node_instance_id `/bin/hostname`.chomp

  load_module Isono::NodeModules::NodeHeartbeat
  load_module MonitoringGateway
end

start(manifest) do
end

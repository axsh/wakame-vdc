# -*-Shell-script-*-
#
# 12.03
#

MUSSEL_RESOURCES="
 host_node
 image
 instance
 load_balancer
 network
 security_group
 ssh_key_pair
 storage_node
"

# instance

## required
image_id=${image_id:-wmi-lucid5}
instance_spec_name=${instance_spec_name:-is-small}
security_groups=${security_groups:-sg-demofgr}
ssh_key_id=${ssh_key_id:-ssh-demo}
hypervisor=${hypervisor:-openvz}
cpu_cores=${cpu_cores:-1}
memory_size=${memory_size:-1024}
protocol=${protocol:-http}
balancer_port=${balancer_port:-80}
instance_port=${instance_port:-80}
balance_algorithm=${balance_algorithm:-leastconn}
max_connection=${max_connection:-1000}
is_public=${is_public:-false}
is_cacheable=${is_cacheable:-false}
vifs=${vifs:-\{\}}

## optional
display_name=${display_name:-}
host_name=${host_name:-}
#host_pool_id=${host_pool_id:-}
#quota_weight=${quota_weight:-1.0}
#user_data=${user_data:-}
cookie_name=${cookie_name:-}
private_key=${private_key:-}
public_key=${public_key:-}
description=${description:-}

function run_cmd() {
case "${1}" in

instance)
  case "${2}" in
  help)    cmd_help    ${1} "index|show|create|destroy|reboot|stop|start|poweroff|poweron" ;;
  index)
    # --state=(running|stopped|terminated|alive)
    xquery="service_type=std"
    if [ ! -z "${state}" ]; then
      xquery="${xquery}\&state=${state}"
    fi
    cmd_index $*
    ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;
  create)
    call_api -s -X POST -H ${http_header}  \
     --data-urlencode "image_id=${image_id}" \
     --data-urlencode "instance_spec_name=${instance_spec_name}"  \
     --data-urlencode "security_groups[]=${security_groups}" \
     --data-urlencode "ssh_key_id=${ssh_key_id}" \
     --data-urlencode "hypervisor=${hypervisor}" \
     --data-urlencode "cpu_cores=${cpu_cores}" \
     --data-urlencode "memory_size=${memory_size}" \
     --data-urlencode "display_name=${display_name}" \
     --data-urlencode "host_name=${host_name}" \
     --data-urlencode "vifs=${vifs}" \
     ${base_uri}/${1}s.${format}
    ;;
  backup)
    call_api -s -X PUT -H ${http_header} \
     -d "description=${description}" \
     -d "display_name=${display_name}" \
     -d "is_public=${is_public}" \
     -d "is_cacheable=${is_cacheable}" \
     ${base_uri}/${1}s/${3}/${2}.${format}
    ;;
  reboot|stop|start|poweroff|poweron)
    call_api -s -X PUT -H ${http_header} -d "''" \
     ${base_uri}/${1}s/${3}/${2}.${format}
    ;;
  *)       cmd_default $* ;;
  esac
  ;;

load_balancer)
  case "${2}" in
  help)    cmd_help    ${1} "index|show|create|destroy|poweroff|poweron" ;;
  index)
    # --state=(running|stopped|terminated|alive)
    if [ ! -z "${state}" ]; then
      xquery="state=${state}"
    fi
    cmd_index $*
    ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;
  create)
    call_api -s -X POST -H ${http_header}  \
     --data-urlencode "display_name=${display_name}" \
     --data-urlencode "protocol=${protocol}" \
     --data-urlencode "port=${balancer_port}" \
     --data-urlencode "instance_port=${instance_port}" \
     --data-urlencode "balance_algorithm=${balance_algorithm}" \
     --data-urlencode "engine=haproxy" \
     --data-urlencode "cookie_name=${cookie_name}" \
     --data-urlencode "private_key=${private_key}" \
     --data-urlencode "public_key=${public_key}" \
     --data-urlencode "engine=haproxy" \
     --data-urlencode "max_connection=${max_connection}" \
     ${base_uri}/${1}s.${format}
    ;;
  poweroff|poweron)
    call_api -s -X PUT -H ${http_header} -d "''" \
     ${base_uri}/${1}s/${3}/${2}.${format}
    ;;
  *)       cmd_default $* ;;
  esac
  ;;
image|backup_object)
  case "${2}" in
  help)    cmd_help    ${1} "index|show|destroy" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  destroy) cmd_destroy $* ;;
  *)       cmd_default $* ;;
  esac
  ;;
host_node|storage_node|network|security_group|ssh_key_pair)
  case "${2}" in
  help)    cmd_help    ${1} "index|show" ;;
  index)   cmd_index   $* ;;
  show)    cmd_show    $* ;;
  *)       cmd_default $* ;;
  esac
  ;;

*)
  echo "$0 [resource] [method]" >&2
  return 1
  ;;

esac
}
